Java面试题
1、一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？
答:可以,但是只能有一个公共类,且与文件名要相同.
  
2、Java有没有goto?
答:goto是java语言中的保留字,目前还没有在java中使用。

3、说说&和&&的区别。
答:&就是常说的and,表示要同时满足两边的表达式结果才是true;而&&是双与,有短路效果,即如果左边的表达式不满足,则不再继续判断右边是否满足,提高了效率.

4、在JAVA中如何跳出当前的多重嵌套循环？
答:方法一:可以在外层循环加一个标志,即"label:"这种语法,然后内层循环直接break label;方法二:可以使外层循环的循环条件受到内层循环的控制,在内层置为false.

5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上?
答:switch语句可以作用在int或者枚举常量上,其中能够隐式转换为int的也是int型.显然,long和String不满足.

6、short s1= 1; s1 =s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?(没有错)
答: s1=s1+1是不会进行自动类型提升的,所以会报错,需要强转为int,因为1默认是int类型;而s1+=1;是会进行自动类型提升的.

7、char型变量中能不能存贮一个中文汉字?为什么?
答:可以.char叫字符类型,而一个汉字就是一个字符,占两个字节.

8、用最有效率的方法算出2乘以8等于几?
答:左移位,一个数左移几位就相当于这个数乘以2的几次方,即2<<3,相当于2*2^3

9、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？
答:如果修饰的是基本数据类型,肯定不能变得.如果修饰的是引用类型,则是指引用不能变,但是引用指向的对象数据还是可以变的.

10，静态变量和实例变量的区别？
答:静态变量：独立存在的变量，只是位置放在某个类下，可以直接类名加点调用静态变量名使用。并且是项目或程序一启动运行到该类时就直接常驻内存。
不需要初始化类再调用该变量。用关键字static声明。静态方法也是同样，可以直接调用。
实例变量：就是相当于该类的属性，需要先初始化该类，就是new 该类后，才可以调用。但是该类未被再次使用，被垃圾回收器回收后，该实例也将不存在了，
就是不在内存中了。
区别如下：
1.存储区域不同：静态变量存储在静态存储区，普通变量存储在堆中；
2.静态变量与类相关，普通变量则与实例相关
3.内存分配方式不同。
4.生命周期不同

11、是否可以从一个static方法内部发出对非static方法的调用？
答:不能.非static方法只能由实例调用.就像我们虽然都是人,但是你的钱不是只要是人就可以用的.

12、Integer与int的区别
答:int是基本数据类型,Integer是引用数据类型.但是java底层提供了自动装箱拆箱.在-128到127之间,他们两个怎么都是相等的,因为会有个缓存区,超过这个范围,
这两个赋值的变量就不再相等.

13、Math.round(11.5)等于多少?Math.round(-11.5)等于多少?
答:12,-11;相信一看答案就明白了.取离它最近的那个整数.符合四舍五入原则.

14、Overload和Override的区别？Overloaded的方法是否可以改变返回值的类型?
答:分别是方法的重载与重写.重写是指除了方法体可以改,其余都不能改.重载是参数签名不同都叫重载,与返回值没有半毛钱关系.重写发生在不同类中,而重写在同一类中.

15、接口是否可继承接口?抽象类是否可实现(implements)接口?抽象类是否可继承具体类(concreteclass)?抽象类中是否可以有静态的main方法？
答:接口可以继承接口.抽象类不可实现接口,如果实现了就与抽象矛盾了.抽象类可继承具体类,因为Object是任何类的子类,它是具体类,但是所继承的类
必须暴露一个公共的构造器.抽象类中也可以有静态main方法,只要不要在方法中去调用抽象方法即可.

16、Java中实现多态的机制是什么？
答:java中的多态有四种,强制的多态:自动类型转换;重载的多态:即操作符的重载,就像+号不同用法;参数的重载:为不同类型参数提供相同操作;包含的多态:兼容子类

17、abstractclass和interface语法上有什么区别?
答:抽象类可以有具体方法,抽象类的抽象方法都要用abstract修饰,而接口只能是抽象方法,并且无需任何特殊修饰符.

18、abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?
答:都不行.抽象方法就是为了给子类继承的,而static修饰的不能被继承;至于native与synchronized,抽象类不关心,子类用不用它也管不着.

19、内部类可以引用它的包含类的成员吗？有没有什么限制？
答:静态内部类:只能访问外围静态成员,成员内部类:无限制,局部内部类:基本无限制,但是不能随意访问所在方法的局部变量,匿名内部类:特殊的局部内部类.

20、String s = "Hello";s = s + "world!";这两行代码执行后，原始的String对象中的内容到底变了没有？
答:没有.String对象中的内容创建了就占了一个固定的空间,且这个空间中的内容不能被改变,但是指向这块空间的引用变量是可以变得,比如这里s就指向了helloworld.

21. ArrayList和Vector的区别
答:Vector与ArrayList一样，都是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，
   避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。
   
22、HashMap和Hashtable的区别
答:Hashtable基本被淘汰.HashMap是线程不安全的,HashMap是重新计算key的hash值得,而不是直接用HashCode方法.HashMap不能用get方法判断是否存在,因为key可为null.

23、List和 Map区别?
答:List是列表,存储单列数据,Map是键值对,存储成对数据.

24、List,Set, Map是否继承自Collection接口?
答:不都是,Map不是.

25、List、Map、Set三个接口，存取元素时，各有什么特点？
答:存:List存储有顺序,也可以指定存在哪个位置;Map按键值对存储,键不能重复;Set没有顺序,不能重复.取:List有索引;Map通过键来取值,Set迭代取值.

26、26、说出ArrayList,Vector,LinkedList的存储性能和特性
答:ArrayList和Vector都是使用数组方式存储数据，此 数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及
  数组元素移动等内存操作，所以索引数据快而插入数据 慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用
  双向链表实现存 储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。
  一.同步性:Vector是线程安全的，也就是说是同步的，而ArrayList是线程序不安全的，不是同步的
  二.数据增长:当需要增长时,Vector 默认增长为原来一培，而ArrayList却是原来的一半
27、去掉一个Vector集合中重复的元素
答:第一种:循环放入一个新的Vector,每次判断其是否存在;第二种:放入set中.

28、Collection和Collections的区别。
 答:Collection是集合类的上级接口，继承与他有关的接口主要有List和Set，Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的
    搜索、排序、线程安全等操作

29、Set里的元素是不能重复的，那么用什么方法来区分重复与否呢?是用==还是equals()?它们有何区别?
答:使用equals判断.双等号对于基本数据类型比较的是值,引用类型比较的是地址;而equals默认比较地址,毕竟他本来就是用于比较引用类型的,但是一般改写比较对象内容.

30、你所知道的集合类都有哪些？主要方法？
答:线性表，链表，哈希表是常用的数据结构，在进行Java开发时，JDK已经为我们提供了一系列相应的类来实现基本的数据结构。这些类均在java.util包中。本文试图通过简单的描述，向读者阐述各个类的作用以及如何正确使用这些类。  
Collection 
├List 
│├LinkedList 
│├ArrayList 
│└Vector 
│　└Stack 
└Set 
Map 
├Hashtable 
├HashMap 
└WeakHashMap 
Collection接口 
　　Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素（Elements）。一些Collection允许相同的元素而另一些不行。一些能排序而另一些不行。Java SDK不提供直接继承自Collection的类，Java SDK提供的类都是继承自Collection的“子接口”如List和Set。 
　　所有实现Collection接口的类都必须提供两个标准的构造函数：无参数的构造函数用于创建一个空的Collection，有一个Collection参数的构造函数用于创建一个新的Collection，这个新的Collection与传入的Collection有相同的元素。后一个构造函数允许用户复制一个Collection。 
　　如何遍历Collection中的每一个元素？不论Collection的实际类型如何，它都支持一个iterator()的方法，该方法返回一个迭代子，使用该迭代子即可逐一访问Collection中每一个元素。典型的用法如下： 
　　　　Iterator it = collection.iterator(); // 获得一个迭代子 
　　　　while(it.hasNext()) { 
　　　　　　Object obj = it.next(); // 得到下一个元素 
　　　　} 
　　由Collection接口派生的两个接口是List和Set。 
List接口 
　　List是有序的Collection，使用此接口能够精确的控制每个元素插入的位置。用户能够使用索引（元素在List中的位置，类似于数组下标）来访问List中的元素，这类似于Java的数组。 
和下面要提到的Set不同，List允许有相同的元素。 
　　除了具有Collection接口必备的iterator()方法外，List还提供一个listIterator()方法，返回一个ListIterator接口，和标准的Iterator接口相比，ListIterator多了一些add()之类的方法，允许添加，删除，设定元素，还能向前或向后遍历。 
　　实现List接口的常用类有LinkedList，ArrayList，Vector和Stack。 
LinkedList类 
　　LinkedList实现了List接口，允许null元素。此外LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。 
　　注意LinkedList没有同步方法。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： 
　　　　List list = Collections.synchronizedList(new LinkedList(...)); 
ArrayList类 
　　ArrayList实现了可变大小的数组。它允许所有元素，包括null。ArrayList没有同步。 
size，isEmpty，get，set方法运行时间为常数。但是add方法开销为分摊的常数，添加n个元素需要O(n)的时间。其他的方法运行时间为线性。 
　　每个ArrayList实例都有一个容量（Capacity），即用于存储元素的数组的大小。这个容量可随着不断添加新元素而自动增加，但是增长算法并没有定义。当需要插入大量元素时，在插入前可以调用ensureCapacity方法来增加ArrayList的容量以提高插入效率。 
　　和LinkedList一样，ArrayList也是非同步的（unsynchronized）。 
Vector类 
　　Vector非常类似ArrayList，但是Vector是同步的。由Vector创建的Iterator，虽然和ArrayList创建的Iterator是同一接口，但是，因为Vector是同步的，当一个Iterator被创建而且正在被使用，另一个线程改变了Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出ConcurrentModificationException，因此必须捕获该异常。 
Stack 类 
　　Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。 
Set接口 
　　Set是一种不包含重复的元素的Collection，即任意的两个元素e1和e2都有e1.equals(e2)=false，Set最多有一个null元素。 
　　很明显，Set的构造函数有一个约束条件，传入的Collection参数不能包含重复的元素。 
　　请注意：必须小心操作可变对象（Mutable Object）。如果一个Set中的可变元素改变了自身状态导致Object.equals(Object)=true将导致一些问题。 
Map接口 
　　请注意，Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value。Map接口提供3种集合的视图，Map的内容可以被当作一组key集合，一组value集合，或者一组key-value映射。 
Hashtable类 
　　Hashtable继承Map接口，实现一个key-value映射的哈希表。任何非空（non-null）的对象都可作为key或者value。 
　　添加数据使用put(key, value)，取出数据使用get(key)，这两个基本操作的时间开销为常数。 
Hashtable通过initial capacity和load factor两个参数调整性能。通常缺省的load factor 0.75较好地实现了时间和空间的均衡。增大load factor可以节省空间但相应的查找时间将增大，这会影响像get和put这样的操作。 
使用Hashtable的简单示例如下，将1，2，3放到Hashtable中，他们的key分别是”one”，”two”，”three”： 
　　　　Hashtable numbers = new Hashtable(); 
　　　　numbers.put(“one”, new Integer(1)); 
　　　　numbers.put(“two”, new Integer(2)); 
　　　　numbers.put(“three”, new Integer(3)); 
　　要取出一个数，比如2，用相应的key： 
　　　　Integer n = (Integer)numbers.get(“two”); 
　　　　System.out.println(“two = ” + n); 
　　由于作为key的对象将通过计算其散列函数来确定与之对应的value的位置，因此任何作为key的对象都必须实现hashCode和equals方法。hashCode和equals方法继承自根类Object，如果你用自定义的类当作key的话，要相当小心，按照散列函数的定义，如果两个对象相同，即obj1.equals(obj2)=true，则它们的hashCode必须相同，但如果两个对象不同，则它们的hashCode不一定不同，如果两个不同对象的hashCode相同，这种现象称为冲突，冲突会导致操作哈希表的时间开销增大，所以尽量定义好的hashCode()方法，能加快哈希表的操作。 
　　如果相同的对象有不同的hashCode，对哈希表的操作会出现意想不到的结果（期待的get方法返回null），要避免这种问题，只需要牢记一条：要同时复写equals方法和hashCode方法，而不要只写其中一个。 
　　Hashtable是同步的。 
HashMap类 
　　HashMap和Hashtable类似，不同之处在于HashMap是非同步的，并且允许null，即null value和null key。，但是将HashMap视为Collection时（values()方法可返回Collection），其迭代子操作时间开销和HashMap的容量成比例。因此，如果迭代操作的性能相当重要的话，不要将HashMap的初始化容量设得过高，或者load factor过低。 
WeakHashMap类 
　　WeakHashMap是一种改进的HashMap，它对key实行“弱引用”，如果一个key不再被外部所引用，那么该key可以被GC回收。 
  
 31、String s = new String("xyz");创建了几个String Object？是否可以继承String类?
  



